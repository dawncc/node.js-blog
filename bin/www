


















      break;
      break;
      console.error(bind + ' is already in use');
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      process.exit(1);
      throw error;
    // named pipe
    // port number
    : 'port ' + addr.port;
    : 'Port ' + port;
    ? 'pipe ' + addr
    ? 'Pipe ' + port
    case 'EACCES':
    case 'EADDRINUSE':
    default:
    return port;
    return val;
    throw error;
  // handle specific listen errors with friendly messages
  debug('Listening on ' + bind);
  if (error.syscall !== 'listen') {
  if (isNaN(port)) {
  if (port >= 0) {
  return false;
  switch (error.code) {
  var addr = server.address();
  var bind = typeof addr === 'string'
  var bind = typeof port === 'string'
  var port = parseInt(val, 10);
  }
  }
  }
  }
 * Create HTTP server.
 * Event listener for HTTP server "error" event.
 * Event listener for HTTP server "listening" event.
 * Get port from environment and store in Express.
 * Listen on provided port, on all network interfaces.
 * Module dependencies.
 * Normalize a port into a number, string, or false.
 */
 */
 */
 */
 */
 */
 */
#!/usr/bin/env node  //标识是node可执行文件
/**
/**
/**
/**
/**
/**
/**
app.set('port', port);
function normalizePort(val) {
function onError(error) {
function onListening() {
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var app = require('../app');
var debug = require('debug')('blog:server');
var http = require('http');
var port = normalizePort(process.env.PORT || '3000');//设置端口号
var server = http.createServer(app);
}
}
}